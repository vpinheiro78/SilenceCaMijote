const sgMail = require("@sendgrid/mail");

// Cl√© SendGrid √† mettre dans les variables d'environnement
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

exports.handler = async (event) => {
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type",
    "Access-Control-Allow-Methods": "POST, OPTIONS"
  };

  // Gestion requ√™te pr√©-vol OPTIONS
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 200,
      headers,
      body: ""
    };
  }

  try {
    const { recetteId, titre, description, photo_url, lien_youtube } = JSON.parse(event.body);

    // Ici tu peux d√©finir un tableau fixe pour test, ou r√©cup√©rer depuis Supabase
    const abonn√©s = ["exemple1@mail.com", "exemple2@mail.com"]; // <- √† remplacer par tes abonn√©s r√©els

    const messages = abonn√©s.map(email => ({
      to: email,
      from: process.env.SENDGRID_FROM, // Doit √™tre valid√© sur SendGrid
      subject: `Nouvelle recette : ${titre}`,
      html: `
        <h2>${titre}</h2>
        <p>${description}</p>
        ${photo_url ? `<img src="${photo_url}" style="max-width:100%;height:auto;"/>` : ""}
        ${lien_youtube ? `<p><a href="${lien_youtube}">Voir la vid√©o</a></p>` : ""}
        <p>Bonne d√©gustation ! üç≤</p>
      `
    }));

    // Envoi des mails (SendGrid autorise plusieurs envois via Promise.all)
    await Promise.all(messages.map(msg => sgMail.send(msg)));

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ message: `Notification envoy√©e √† ${abonn√©s.length} abonn√©s !` })
    };

  } catch (error) {
    console.error("Erreur notifyAll:", error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: error.message })
    };
  }
};
